{"ast":null,"code":"var _jsxFileName = \"/Users/jijeong/study/bookStore-app/src/routes/Mypage/Toggle/index.tsx\",\n    _s = $RefreshSig$();\n\nimport styles from './toggle.module.scss';\nimport cx from 'classnames';\nimport { useState } from 'react';\nimport { useRecoil } from 'hooks/state';\nimport { themeState } from 'states/system';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Toggle = () => {\n  _s();\n\n  const [theme, setTheme] = useRecoil(themeState);\n  const [isToggleChecked, setIsToggleChecked] = useState(false);\n\n  const handleChangeTheme = () => {\n    if (theme === 'light') setTheme('dark');else setTheme('light');\n  };\n\n  const clickToggle = () => {\n    setIsToggleChecked(prev => !prev);\n    handleChangeTheme();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: cx(styles.toggle),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cx(styles.wrapper),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: cx(styles.toggleMove, {\n          [styles.move]: isToggleChecked\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: cx(styles.buttons),\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: cx(styles.button, {\n            [styles.clicked]: !isToggleChecked\n          }),\n          type: \"button\",\n          onClick: clickToggle,\n          children: /*#__PURE__*/_jsxDEV(\"lightModeIcon\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: cx(styles.button, {\n            [styles.clicked]: isToggleChecked\n          }),\n          type: \"button\",\n          onClick: clickToggle,\n          children: \"\\uC0C1\\uC138\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Toggle, \"3iSiCSWGMMOkeXcWI0SUv7CmFBE=\", false, function () {\n  return [useRecoil];\n});\n\n_c = Toggle;\nexport default Toggle;\n\nvar _c;\n\n$RefreshReg$(_c, \"Toggle\");","map":{"version":3,"names":["styles","cx","useState","useRecoil","themeState","Toggle","theme","setTheme","isToggleChecked","setIsToggleChecked","handleChangeTheme","clickToggle","prev","toggle","wrapper","toggleMove","move","buttons","button","clicked"],"sources":["/Users/jijeong/study/bookStore-app/src/routes/Mypage/Toggle/index.tsx"],"sourcesContent":["import styles from './toggle.module.scss'\n\nimport cx from 'classnames'\nimport { useState } from 'react'\nimport { useRecoil } from 'hooks/state'\nimport { themeState } from 'states/system'\n\nconst Toggle = () => {\n  const [theme, setTheme] = useRecoil(themeState)\n  const [isToggleChecked, setIsToggleChecked] = useState(false)\n\n  const handleChangeTheme = () => {\n    if (theme === 'light') setTheme('dark')\n    else setTheme('light')\n  }\n\n  const clickToggle = () => {\n    setIsToggleChecked((prev) => !prev)\n    handleChangeTheme()\n  }\n  return (\n    <div className={cx(styles.toggle)}>\n      <div className={cx(styles.wrapper)}>\n        <div className={cx(styles.toggleMove, { [styles.move]: isToggleChecked })} />\n        <div className={cx(styles.buttons)}>\n          <button\n            className={cx(styles.button, { [styles.clicked]: !isToggleChecked })}\n            type='button'\n            onClick={clickToggle}\n          >\n            <lightModeIcon />\n          </button>\n          <button\n            className={cx(styles.button, { [styles.clicked]: isToggleChecked })}\n            type='button'\n            onClick={clickToggle}\n          >\n            상세\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Toggle\n"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AAEA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,UAAT,QAA2B,eAA3B;;;AAEA,MAAMC,MAAM,GAAG,MAAM;EAAA;;EACnB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,SAAS,CAACC,UAAD,CAAnC;EACA,MAAM,CAACI,eAAD,EAAkBC,kBAAlB,IAAwCP,QAAQ,CAAC,KAAD,CAAtD;;EAEA,MAAMQ,iBAAiB,GAAG,MAAM;IAC9B,IAAIJ,KAAK,KAAK,OAAd,EAAuBC,QAAQ,CAAC,MAAD,CAAR,CAAvB,KACKA,QAAQ,CAAC,OAAD,CAAR;EACN,CAHD;;EAKA,MAAMI,WAAW,GAAG,MAAM;IACxBF,kBAAkB,CAAEG,IAAD,IAAU,CAACA,IAAZ,CAAlB;IACAF,iBAAiB;EAClB,CAHD;;EAIA,oBACE;IAAK,SAAS,EAAET,EAAE,CAACD,MAAM,CAACa,MAAR,CAAlB;IAAA,uBACE;MAAK,SAAS,EAAEZ,EAAE,CAACD,MAAM,CAACc,OAAR,CAAlB;MAAA,wBACE;QAAK,SAAS,EAAEb,EAAE,CAACD,MAAM,CAACe,UAAR,EAAoB;UAAE,CAACf,MAAM,CAACgB,IAAR,GAAeR;QAAjB,CAApB;MAAlB;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAK,SAAS,EAAEP,EAAE,CAACD,MAAM,CAACiB,OAAR,CAAlB;QAAA,wBACE;UACE,SAAS,EAAEhB,EAAE,CAACD,MAAM,CAACkB,MAAR,EAAgB;YAAE,CAAClB,MAAM,CAACmB,OAAR,GAAkB,CAACX;UAArB,CAAhB,CADf;UAEE,IAAI,EAAC,QAFP;UAGE,OAAO,EAAEG,WAHX;UAAA,uBAKE;YAAA;YAAA;YAAA;UAAA;QALF;UAAA;UAAA;UAAA;QAAA,QADF,eAQE;UACE,SAAS,EAAEV,EAAE,CAACD,MAAM,CAACkB,MAAR,EAAgB;YAAE,CAAClB,MAAM,CAACmB,OAAR,GAAkBX;UAApB,CAAhB,CADf;UAEE,IAAI,EAAC,QAFP;UAGE,OAAO,EAAEG,WAHX;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QARF;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAuBD,CApCD;;GAAMN,M;UACsBF,S;;;KADtBE,M;AAsCN,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}