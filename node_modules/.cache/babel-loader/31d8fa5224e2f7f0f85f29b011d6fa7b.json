{"ast":null,"code":"export const csvToArray = function (str) {\n  let delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';\n  if (!str) return [];\n  const headers = str.slice(0, str.indexOf('\\n')).replace('\\r', '').split(',');\n  const rows = str.slice(str.indexOf('\\n') + 1).split('\\r');\n  const arr = rows.map(row => {\n    const values = row.split(delimiter);\n    const el = headers.reduce((object, header, index) => {\n      object[header] = Number(values[index]);\n      return object;\n    }, {});\n    return el;\n  });\n  return arr;\n};\n\nconst parseDate = rawStr => {\n  const str = rawStr.toString();\n  const y = Number(str.substring(0, 4));\n  const m = Number(str.substring(4, 6)) - 1;\n  const d = Number(str.substring(6, 8));\n  return new Date(y, m, d);\n};\n\nexport const convertData = data => {\n  const confirmed = [];\n  const critical = [];\n  const death = [];\n  const negative = [];\n  const released = [];\n  const tested = [];\n  data.forEach(d => {\n    confirmed.push({\n      x: parseDate(d.date),\n      y: d.confirmed\n    });\n    critical.push({\n      x: parseDate(d.date),\n      y: d.critical\n    });\n    death.push({\n      x: parseDate(d.date),\n      y: d.death\n    });\n    negative.push({\n      x: parseDate(d.date),\n      y: d.negative\n    });\n    released.push({\n      x: parseDate(d.date),\n      y: d.released\n    });\n    tested.push({\n      x: parseDate(d.date),\n      y: d.tested\n    });\n  });\n  return {\n    confirmed,\n    critical,\n    death,\n    negative,\n    released,\n    tested\n  };\n};","map":{"version":3,"names":["csvToArray","str","delimiter","headers","slice","indexOf","replace","split","rows","arr","map","row","values","el","reduce","object","header","index","Number","parseDate","rawStr","toString","y","substring","m","d","Date","convertData","data","confirmed","critical","death","negative","released","tested","forEach","push","x","date"],"sources":["/Users/jijeong/study/foundation-ts/src/routes/Chart/Corona/utils.ts"],"sourcesContent":["import { ChartDataItem } from 'types/corona'\n\ntype ChartData = Record<string, number>\n\nexport const csvToArray = (str?: string, delimiter = ',') => {\n  if (!str) return []\n\n  const headers = str.slice(0, str.indexOf('\\n')).replace('\\r', '').split(',')\n  const rows = str.slice(str.indexOf('\\n') + 1).split('\\r')\n\n  const arr = rows.map((row) => {\n    const values = row.split(delimiter)\n\n    const el = headers.reduce<ChartData>((object, header, index) => {\n      object[header] = Number(values[index])\n      return object\n    }, {})\n\n    return el\n  }) as ChartDataItem[]\n\n  return arr\n}\n\ntype Data = {\n  x: Date\n  y: number\n}\n\nconst parseDate = (rawStr: number) => {\n  const str = rawStr.toString()\n  const y = Number(str.substring(0, 4))\n  const m = Number(str.substring(4, 6)) - 1\n  const d = Number(str.substring(6, 8))\n  return new Date(y, m, d)\n}\n\nexport const convertData = (data: ChartDataItem[]) => {\n  const confirmed: Data[] = []\n  const critical: Data[] = []\n  const death: Data[] = []\n  const negative: Data[] = []\n  const released: Data[] = []\n  const tested: Data[] = []\n\n  data.forEach((d) => {\n    confirmed.push({\n      x: parseDate(d.date),\n      y: d.confirmed,\n    })\n    critical.push({\n      x: parseDate(d.date),\n      y: d.critical,\n    })\n    death.push({\n      x: parseDate(d.date),\n      y: d.death,\n    })\n    negative.push({\n      x: parseDate(d.date),\n      y: d.negative,\n    })\n    released.push({\n      x: parseDate(d.date),\n      y: d.released,\n    })\n    tested.push({\n      x: parseDate(d.date),\n      y: d.tested,\n    })\n  })\n\n  return {\n    confirmed,\n    critical,\n    death,\n    negative,\n    released,\n    tested,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}