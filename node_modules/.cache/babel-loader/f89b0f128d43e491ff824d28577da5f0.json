{"ast":null,"code":"var _jsxFileName = \"/Users/jijeong/study/bookStore-app/src/routes/TodoList/Item.tsx\",\n    _s = $RefreshSig$();\n\nimport cx from 'classnames';\nimport styles from './todoList.module.scss';\nimport { useAppDispatch, useAppSelector, useGA } from 'hooks';\nimport { getTodoList, setTodoList } from 'states/todo';\nimport { CheckIcon } from '../../assets/svgs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TodoItem = _ref => {\n  _s();\n\n  let {\n    todo\n  } = _ref;\n  const {\n    gaEvent\n  } = useGA();\n  const dispatch = useAppDispatch();\n  const todoList = useAppSelector(getTodoList);\n  const {\n    done,\n    id,\n    title\n  } = todo; // const prevDone = usePrevious(done)\n  // const [isDone, setIsDone] = useState(done)\n\n  const handleChange = e => {\n    const {\n      checked\n    } = e.currentTarget;\n    gaEvent({\n      action: 'todo',\n      data: {\n        checked: checked ? 'check' : 'uncheck'\n      }\n    });\n    dispatch(setTodoList(todoList.map(item => item.id === Number(id) ? { ...item,\n      done: checked\n    } : item)));\n  }; // const [plantSetIsDone] = useTimeoutFn(() => setIsDone(true), 500)\n  // useEffect(() => {\n  //   if (prevDone === undefined || prevDone === done) return\n  //   if (done) {\n  //     plantSetIsDone()\n  //   } else {\n  //     setIsDone(done)\n  //   }\n  // }, [done, plantSetIsDone, prevDone])\n\n\n  return (\n    /*#__PURE__*/\n    // <li className={cx(styles.task, { [styles.done]: isDone })}>\n    _jsxDEV(\"li\", {\n      className: cx(styles.task, {\n        [styles.done]: done\n      }),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.checkboxWrapper,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: done,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(CheckIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.title,\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(TodoItem, \"xItTWjwouQGfZ7vWq0nfawiBQys=\", false, function () {\n  return [useGA, useAppDispatch, useAppSelector];\n});\n\n_c = TodoItem;\nexport default TodoItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoItem\");","map":{"version":3,"names":["cx","styles","useAppDispatch","useAppSelector","useGA","getTodoList","setTodoList","CheckIcon","TodoItem","todo","gaEvent","dispatch","todoList","done","id","title","handleChange","e","checked","currentTarget","action","data","map","item","Number","task","checkboxWrapper"],"sources":["/Users/jijeong/study/bookStore-app/src/routes/TodoList/Item.tsx"],"sourcesContent":["import { ChangeEvent } from 'react'\nimport cx from 'classnames'\nimport styles from './todoList.module.scss'\n\nimport { useAppDispatch, useAppSelector, useGA } from 'hooks'\nimport { getTodoList, setTodoList } from 'states/todo'\nimport { ITodoItem } from 'types/todo.d'\n\nimport { CheckIcon } from '../../assets/svgs'\n\ninterface Props {\n  todo: ITodoItem\n}\n\nconst TodoItem = ({ todo }: Props) => {\n  const { gaEvent } = useGA()\n  const dispatch = useAppDispatch()\n  const todoList = useAppSelector(getTodoList)\n  const { done, id, title } = todo\n  // const prevDone = usePrevious(done)\n  // const [isDone, setIsDone] = useState(done)\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { checked } = e.currentTarget\n    gaEvent({ action: 'todo', data: { checked: checked ? 'check' : 'uncheck' } })\n    dispatch(setTodoList(todoList.map((item) => (item.id === Number(id) ? { ...item, done: checked } : item))))\n  }\n\n  // const [plantSetIsDone] = useTimeoutFn(() => setIsDone(true), 500)\n\n  // useEffect(() => {\n  //   if (prevDone === undefined || prevDone === done) return\n  //   if (done) {\n  //     plantSetIsDone()\n  //   } else {\n  //     setIsDone(done)\n  //   }\n  // }, [done, plantSetIsDone, prevDone])\n\n  return (\n    // <li className={cx(styles.task, { [styles.done]: isDone })}>\n    <li className={cx(styles.task, { [styles.done]: done })}>\n      <div className={styles.checkboxWrapper}>\n        <input type='checkbox' checked={done} onChange={handleChange} />\n        <CheckIcon />\n      </div>\n      <p className={styles.title}>{title}</p>\n    </li>\n  )\n}\n\nexport default TodoItem\n"],"mappings":";;;AACA,OAAOA,EAAP,MAAe,YAAf;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AAEA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,KAAzC,QAAsD,OAAtD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAGA,SAASC,SAAT,QAA0B,mBAA1B;;;AAMA,MAAMC,QAAQ,GAAG,QAAqB;EAAA;;EAAA,IAApB;IAAEC;EAAF,CAAoB;EACpC,MAAM;IAAEC;EAAF,IAAcN,KAAK,EAAzB;EACA,MAAMO,QAAQ,GAAGT,cAAc,EAA/B;EACA,MAAMU,QAAQ,GAAGT,cAAc,CAACE,WAAD,CAA/B;EACA,MAAM;IAAEQ,IAAF;IAAQC,EAAR;IAAYC;EAAZ,IAAsBN,IAA5B,CAJoC,CAKpC;EACA;;EAEA,MAAMO,YAAY,GAAIC,CAAD,IAAsC;IACzD,MAAM;MAAEC;IAAF,IAAcD,CAAC,CAACE,aAAtB;IACAT,OAAO,CAAC;MAAEU,MAAM,EAAE,MAAV;MAAkBC,IAAI,EAAE;QAAEH,OAAO,EAAEA,OAAO,GAAG,OAAH,GAAa;MAA/B;IAAxB,CAAD,CAAP;IACAP,QAAQ,CAACL,WAAW,CAACM,QAAQ,CAACU,GAAT,CAAcC,IAAD,IAAWA,IAAI,CAACT,EAAL,KAAYU,MAAM,CAACV,EAAD,CAAlB,GAAyB,EAAE,GAAGS,IAAL;MAAWV,IAAI,EAAEK;IAAjB,CAAzB,GAAsDK,IAA9E,CAAD,CAAZ,CAAR;EACD,CAJD,CARoC,CAcpC;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAEA;IAAA;IACE;IACA;MAAI,SAAS,EAAEvB,EAAE,CAACC,MAAM,CAACwB,IAAR,EAAc;QAAE,CAACxB,MAAM,CAACY,IAAR,GAAeA;MAAjB,CAAd,CAAjB;MAAA,wBACE;QAAK,SAAS,EAAEZ,MAAM,CAACyB,eAAvB;QAAA,wBACE;UAAO,IAAI,EAAC,UAAZ;UAAuB,OAAO,EAAEb,IAAhC;UAAsC,QAAQ,EAAEG;QAAhD;UAAA;UAAA;UAAA;QAAA,QADF,eAEE,QAAC,SAAD;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAKE;QAAG,SAAS,EAAEf,MAAM,CAACc,KAArB;QAAA,UAA6BA;MAA7B;QAAA;QAAA;QAAA;MAAA,QALF;IAAA;MAAA;MAAA;MAAA;IAAA;EAFF;AAUD,CAnCD;;GAAMP,Q;UACgBJ,K,EACHF,c,EACAC,c;;;KAHbK,Q;AAqCN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}